<workflow-app name="promote_action_payload_for_dataset_table" xmlns="uri:oozie:workflow:0.5">
    <parameters>
        <property>
            <name>activePromoteDatasetActionPayload</name>
            <description>when true will promote actions with eu.dnetlib.dhp.schema.oaf.Dataset payload</description>
        </property>
        <property>
            <name>activePromoteResultActionPayload</name>
            <description>when true will promote actions with eu.dnetlib.dhp.schema.oaf.Result payload</description>
        </property>
        <property>
            <name>inputGraphRootPath</name>
            <description>root location of input materialized graph</description>
        </property>
        <property>
            <name>inputActionPayloadRootPath</name>
            <description>root location of action payloads to promote</description>
        </property>
        <property>
            <name>outputGraphRootPath</name>
            <description>root location for output materialized graph</description>
        </property>
        <property>
            <name>mergeAndGetStrategy</name>
            <description>strategy for merging graph table objects with action payload instances, MERGE_FROM_AND_GET or SELECT_NEWER_AND_GET</description>
        </property>
        <property>
            <name>shouldGroupById</name>
            <description>indicates whether the promotion operation should group objects in the graph by id or not</description>
        </property>

        <!-- General oozie workflow properties -->
        <property>
            <name>sparkClusterOpts</name>
            <value>--conf spark.network.timeout=600 --conf spark.extraListeners= --conf spark.sql.queryExecutionListeners= --conf spark.yarn.historyServer.address=http://iis-cdh5-test-m3.ocean.icm.edu.pl:18088 --conf spark.eventLog.dir=hdfs://nameservice1/user/spark/applicationHistory --conf spark.shuffle.service.enabled=false</value>
            <description>spark cluster-wide options</description>
        </property>
        <property>
            <name>sparkResourceOpts</name>
            <value>--executor-memory=6G --conf spark.executor.memoryOverhead=4G --executor-cores=6 --driver-memory=8G --driver-cores=4</value>
            <description>spark resource options</description>
        </property>
    </parameters>

    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>oozie.action.sharelib.for.spark</name>
                <value>${oozieActionShareLibForSpark2}</value>
            </property>
        </configuration>
    </global>

    <start to="DecisionPromoteDatasetActionPayload"/>

    <kill name="Kill">
        <message>Action failed, error message[${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>

    <decision name="DecisionPromoteDatasetActionPayload">
        <switch>
            <case to="PromoteDatasetActionPayloadForDatasetTable">
                ${(activePromoteDatasetActionPayload eq "true") and
                (fs:exists(concat(concat(concat(concat(wf:conf('nameNode'),'/'),wf:conf('inputGraphRootPath')),'/'),'dataset')) eq "true") and
                (fs:exists(concat(concat(concat(concat(wf:conf('nameNode'),'/'),wf:conf('inputActionPayloadRootPath')),'/'),'clazz=eu.dnetlib.dhp.schema.oaf.Dataset')) eq "true")}
            </case>
            <default to="SkipPromoteDatasetActionPayloadForDatasetTable"/>
        </switch>
    </decision>

    <action name="PromoteDatasetActionPayloadForDatasetTable">
        <spark xmlns="uri:oozie:spark-action:0.2">
            <master>yarn-cluster</master>
            <mode>cluster</mode>
            <name>PromoteDatasetActionPayloadForDatasetTable</name>
            <class>eu.dnetlib.dhp.actionmanager.promote.PromoteActionPayloadForGraphTableJob</class>
            <jar>dhp-actionmanager-${projectVersion}.jar</jar>
            <spark-opts>
                ${sparkClusterOpts}
                ${sparkResourceOpts}
                --conf spark.sql.shuffle.partitions=7000
            </spark-opts>
            <arg>--inputGraphTablePath</arg><arg>${inputGraphRootPath}/dataset</arg>
            <arg>--graphTableClassName</arg><arg>eu.dnetlib.dhp.schema.oaf.Dataset</arg>
            <arg>--inputActionPayloadPath</arg><arg>${inputActionPayloadRootPath}/clazz=eu.dnetlib.dhp.schema.oaf.Dataset</arg>
            <arg>--actionPayloadClassName</arg><arg>eu.dnetlib.dhp.schema.oaf.Dataset</arg>
            <arg>--outputGraphTablePath</arg><arg>${workingDir}/dataset</arg>
            <arg>--mergeAndGetStrategy</arg><arg>${mergeAndGetStrategy}</arg>
            <arg>--promoteActionStrategy</arg><arg>${promoteActionStrategy}</arg>
            <arg>--shouldGroupById</arg><arg>${shouldGroupById}</arg>
        </spark>
        <ok to="DecisionPromoteResultActionPayloadForDatasetTable"/>
        <error to="Kill"/>
    </action>

    <action name="SkipPromoteDatasetActionPayloadForDatasetTable">
        <distcp xmlns="uri:oozie:distcp-action:0.2">
            <prepare>
                <delete path="${workingDir}/dataset"/>
            </prepare>
            <arg>-pb</arg>
            <arg>${inputGraphRootPath}/dataset</arg>
            <arg>${workingDir}/dataset</arg>
        </distcp>
        <ok to="DecisionPromoteResultActionPayloadForDatasetTable"/>
        <error to="Kill"/>
    </action>

    <decision name="DecisionPromoteResultActionPayloadForDatasetTable">
        <switch>
            <case to="PromoteResultActionPayloadForDatasetTable">
                ${(activePromoteResultActionPayload eq "true") and
                (fs:exists(concat(concat(concat(concat(wf:conf('nameNode'),'/'),wf:conf('inputActionPayloadRootPath')),'/'),'clazz=eu.dnetlib.dhp.schema.oaf.Result')) eq "true")}
            </case>
            <default to="SkipPromoteResultActionPayloadForDatasetTable"/>
        </switch>
    </decision>

    <action name="PromoteResultActionPayloadForDatasetTable">
        <spark xmlns="uri:oozie:spark-action:0.2">
            <master>yarn-cluster</master>
            <mode>cluster</mode>
            <name>PromoteResultActionPayloadForDatasetTable</name>
            <class>eu.dnetlib.dhp.actionmanager.promote.PromoteActionPayloadForGraphTableJob</class>
            <jar>dhp-actionmanager-${projectVersion}.jar</jar>
            <spark-opts>
                ${sparkClusterOpts}
                ${sparkResourceOpts}
                --conf spark.sql.shuffle.partitions=7000
            </spark-opts>
            <arg>--inputGraphTablePath</arg><arg>${workingDir}/dataset</arg>
            <arg>--graphTableClassName</arg><arg>eu.dnetlib.dhp.schema.oaf.Dataset</arg>
            <arg>--inputActionPayloadPath</arg><arg>${inputActionPayloadRootPath}/clazz=eu.dnetlib.dhp.schema.oaf.Result</arg>
            <arg>--actionPayloadClassName</arg><arg>eu.dnetlib.dhp.schema.oaf.Result</arg>
            <arg>--outputGraphTablePath</arg><arg>${outputGraphRootPath}/dataset</arg>
            <arg>--mergeAndGetStrategy</arg><arg>${mergeAndGetStrategy}</arg>
            <arg>--promoteActionStrategy</arg><arg>${promoteActionStrategy}</arg>
            <arg>--shouldGroupById</arg><arg>${shouldGroupById}</arg>
        </spark>
        <ok to="End"/>
        <error to="Kill"/>
    </action>

    <action name="SkipPromoteResultActionPayloadForDatasetTable">
        <distcp xmlns="uri:oozie:distcp-action:0.2">
            <prepare>
                <delete path="${outputGraphRootPath}/dataset"/>
            </prepare>
            <arg>-pb</arg>
            <arg>${workingDir}/dataset</arg>
            <arg>${outputGraphRootPath}/dataset</arg>
        </distcp>
        <ok to="End"/>
        <error to="Kill"/>
    </action>

    <end name="End"/>
</workflow-app>