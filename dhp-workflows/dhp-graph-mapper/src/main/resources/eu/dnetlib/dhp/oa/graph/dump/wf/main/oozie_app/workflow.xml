<workflow-app name="dump_graph" xmlns="uri:oozie:workflow:0.5">

    <parameters>
        <property>
            <name>singleDeposition</name>
            <description>Indicates if it is a single community deposition</description>
        </property>
        <property>
            <name>communityId</name>
            <description>the id of the community to be dumped if a dump for a single community should be done</description>
        </property>
        <property>
            <name>dumpType</name>
            <description>the type of the dump one of {complete, community, funder}</description>
        </property>
        <property>
            <name>onlyUpload</name>
            <description>true if the dump is already done and should only be upload in zenodo</description>
        </property>
        <property>
            <name>upload</name>
            <description>true if the dump should be upload in zenodo</description>
        </property>
        <property>
            <name>sourcePath</name>
            <description>the source path</description>
        </property>
        <property>
            <name>isLookUpUrl</name>
            <description>the isLookup service endpoint</description>
        </property>
        <property>
            <name>outputPath</name>
            <description>the output path</description>
        </property>
        <property>
            <name>resultAggregation</name>
            <description>true if all the result type have to be dumped under result. false otherwise</description>
        </property>
        <property>
            <name>accessToken</name>
            <description>the access token used for the deposition in Zenodo</description>
        </property>
        <property>
            <name>connectionUrl</name>
            <description>the connection url for Zenodo</description>
        </property>
        <property>
            <name>metadata</name>
            <description> the metadata associated to the deposition</description>
        </property>
        <property>
            <name>depositionType</name>
            <description>the type of deposition we want to perform. "new" for brand new deposition, "version" for a new version of a published deposition (in this case the concept record id must be provided), "upload" to upload content to an open deposition for which we already have the deposition id (in this case the deposition id should be provided)</description>
        </property>
        <property>
            <name>conceptRecordId</name>
            <description>for new version, the id of the record for the old deposition</description>
        </property>
        <property>
            <name>depositionId</name>
            <description>the depositionId of a deposition open that has to be added content</description>
        </property>
        <property>
            <name>organizationCommunityMap</name>
            <description>the organization community map</description>
        </property>

        <property>
            <name>hiveDbName</name>
            <description>the target hive database name</description>
        </property>
        <property>
            <name>hiveJdbcUrl</name>
            <description>hive server jdbc url</description>
        </property>
        <property>
            <name>hiveMetastoreUris</name>
            <description>hive server metastore URIs</description>
        </property>
        <property>
            <name>sparkDriverMemory</name>
            <description>memory for driver process</description>
        </property>
        <property>
            <name>sparkExecutorMemory</name>
            <description>memory for individual executor</description>
        </property>
        <property>
            <name>sparkExecutorCores</name>
            <description>number of cores used by single executor</description>
        </property>
        <property>
            <name>oozieActionShareLibForSpark2</name>
            <description>oozie action sharelib for spark 2.*</description>
        </property>
        <property>
            <name>spark2ExtraListeners</name>
            <value>com.cloudera.spark.lineage.NavigatorAppListener</value>
            <description>spark 2.* extra listeners classname</description>
        </property>
        <property>
            <name>spark2SqlQueryExecutionListeners</name>
            <value>com.cloudera.spark.lineage.NavigatorQueryListener</value>
            <description>spark 2.* sql query execution listeners classname</description>
        </property>
        <property>
            <name>spark2YarnHistoryServerAddress</name>
            <description>spark 2.* yarn history server address</description>
        </property>
        <property>
            <name>spark2EventLogDir</name>
            <description>spark 2.* event log dir location</description>
        </property>
    </parameters>

    <global>
        <job-tracker>${jobTracker}</job-tracker>
        <name-node>${nameNode}</name-node>
        <configuration>
            <property>
                <name>mapreduce.job.queuename</name>
                <value>${queueName}</value>
            </property>
            <property>
                <name>oozie.launcher.mapred.job.queue.name</name>
                <value>${oozieLauncherQueueName}</value>
            </property>
            <property>
                <name>oozie.action.sharelib.for.spark</name>
                <value>${oozieActionShareLibForSpark2}</value>
            </property>

        </configuration>
    </global>

    <start to="only_upload"/>

    <kill name="Kill">
        <message>Action failed, error message[${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>

    <decision name="only_upload">
        <switch>
            <case to="send_zenodo">${wf:conf('onlyUpload') eq true}</case>
            <default to="reset_outputpath"/>
        </switch>
    </decision>

    <action name="reset_outputpath">
        <fs>
            <delete path="${outputPath}"/>
            <mkdir path="${outputPath}"/>
        </fs>
        <ok to="save_community_map"/>
        <error to="Kill"/>
    </action>

    <action name="save_community_map">
        <java>
            <main-class>eu.dnetlib.dhp.oa.graph.dump.SaveCommunityMap</main-class>
            <arg>--outputPath</arg><arg>${workingDir}/communityMap</arg>
            <arg>--nameNode</arg><arg>${nameNode}</arg>
            <arg>--isLookUpUrl</arg><arg>${isLookUpUrl}</arg>
            <arg>--singleDeposition</arg><arg>${singleDeposition}</arg>
            <arg>--communityId</arg><arg>${communityId}</arg>
        </java>
        <ok to="choose_dump"/>
        <error to="Kill"/>
    </action>

    <decision name="choose_dump">
        <switch>
            <case to="dump_funder">${wf:conf('dumpType') eq "funder"}</case>
            <case to="dump_community">${wf:conf('dumpType') eq "community"}</case>
            <default to="dump_complete"/>
        </switch>
    </decision>

    <!-- Sub-workflow which runs the dump for the complete graph -->
    <action name="dump_complete">
        <sub-workflow>
            <app-path>${wf:appPath()}/dump_complete
            </app-path>
            <propagate-configuration/>
            <configuration>
                <property>
                    <name>communityMapPath</name>
                    <value>${workingDir}/communityMap</value>
                </property>
                <property>
                    <name>outputPath</name>
                    <value>${workingDir}/tar</value>
                </property>
                <property>
                    <name>sourcePath</name>
                    <value>${sourcePath}</value>
                </property>
                <property>
                    <name>organizationCommunityMap</name>
                    <value>${organizationCommunityMap}</value>
                </property>
                <property>
                    <name>isLookUpUrl</name>
                    <value>${isLookUpUrl}</value>
                </property>
                <property>
                    <name>resultAggregation</name>
                    <value>${resultAggregation}</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="make_archive" />
        <error to="Kill" />
    </action>

    <!-- Sub-workflow which runs the dump for the complete graph -->
    <action name="dump_community">
        <sub-workflow>
            <app-path>${wf:appPath()}/dump_community
            </app-path>
            <propagate-configuration/>
            <configuration>
                <property>
                    <name>sourcePath</name>
                    <value>${sourcePath}</value>
                </property>
                <property>
                    <name>communityMapPath</name>
                    <value>${workingDir}/communityMap</value>
                </property>
                <property>
                    <name>outputPath</name>
                    <value>${workingDir}/tar</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="make_archive" />
        <error to="Kill" />
    </action>

    <action name="dump_funder">
        <sub-workflow>
            <app-path>${wf:appPath()}/dump_funder
            </app-path>
            <propagate-configuration/>
            <configuration>
                <property>
                    <name>communityMapPath</name>
                    <value>${workingDir}/communityMap</value>
                </property>
                <property>
                    <name>outputPath</name>
                    <value>${workingDir}/tar</value>
                </property>
                <property>
                    <name>sourcePath</name>
                    <value>${sourcePath}</value>
                </property>
                <property>
                    <name>dumpType</name>
                    <value>${dumpType}</value>
                </property>
            </configuration>
        </sub-workflow>
        <ok to="make_archive" />
        <error to="Kill" />
    </action>

    <action name="make_archive">
        <java>
            <main-class>eu.dnetlib.dhp.oa.graph.dump.MakeTar</main-class>
            <arg>--hdfsPath</arg><arg>${outputPath}</arg>
            <arg>--nameNode</arg><arg>${nameNode}</arg>
            <arg>--sourcePath</arg><arg>${workingDir}/tar</arg>
        </java>
        <ok to="should_upload"/>
        <error to="Kill"/>
    </action>

    <decision name="should_upload">
        <switch>
            <case to="send_zenodo">${wf:conf('upload') eq true}</case>
            <default to="End"/>
        </switch>
    </decision>

    <action name="send_zenodo">
        <java>
            <main-class>eu.dnetlib.dhp.oa.graph.dump.SendToZenodoHDFS</main-class>
            <arg>--hdfsPath</arg><arg>${outputPath}</arg>
            <arg>--nameNode</arg><arg>${nameNode}</arg>
            <arg>--accessToken</arg><arg>${accessToken}</arg>
            <arg>--connectionUrl</arg><arg>${connectionUrl}</arg>
            <arg>--metadata</arg><arg>${metadata}</arg>
            <arg>--conceptRecordId</arg><arg>${conceptRecordId}</arg>
            <arg>--depositionType</arg><arg>${depositionType}</arg>
            <arg>--depositionId</arg><arg>${depositionId}</arg>
        </java>
        <ok to="End"/>
        <error to="Kill"/>
    </action>

    <end name="End"/>

</workflow-app>
